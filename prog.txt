# ***Defining Quantum registers***

router = QuantumRegister(2, 'r')
router_check = QuantumRegister(6, 'rc')
header = QuantumRegister(3, 'h')
header_check = QuantumRegister(24, 'hc')
rc_ancillas = QuantumRegister(9, 'rca')
hc_ancillas = QuantumRegister(32, 'hca')
fwd_ancillas = QuantumRegister(2, 'fwd')
qc = QuantumCircuit(router, router_check, header, header_check, rc_ancillas, hc_ancillas, fwd_ancillas)
# ***Router bit-checker circuit***

qc.x(2)
qc.x(3)
qc.x(4)
qc.x(7)
qc.x(11)
qc.x(12)
qc.x(13)
qc.x(14)
qc.x(15)
qc.x(17)
qc.x(19)
qc.x(20)
qc.x(24)
qc.x(25)
qc.x(27)
qc.x(31)
qc.cx(0,35)
qc.cx(2,35)
qc.cx(1,36)
qc.cx(3,36)
qc.cx(0,38)
qc.cx(4,38)
qc.cx(1,39)
qc.cx(5,39)
qc.cx(0,41)
qc.cx(6,41)
qc.cx(1,42)
qc.cx(7,42)
qc.cx(8,44)
qc.cx(11,44)
qc.cx(9,45)
qc.cx(12,45)
qc.cx(10,46)
qc.cx(13,46)
qc.cx(8,48)
qc.cx(14,48)
qc.cx(9,49)
qc.cx(15,49)
qc.cx(10,50)
qc.cx(16,50)
qc.cx(8,52)
qc.cx(17,52)
qc.cx(9,53)
qc.cx(18,53)
qc.cx(10,54)
qc.cx(19,54)
qc.cx(8,56)
qc.cx(20,56)
qc.cx(9,57)
qc.cx(21,57)
qc.cx(10,58)
qc.cx(22,58)
qc.cx(8,60)
qc.cx(23,60)
qc.cx(9,61)
qc.cx(24,61)
qc.cx(10,62)
qc.cx(25,62)
qc.cx(8,64)
qc.cx(26,64)
qc.cx(9,65)
qc.cx(27,65)
qc.cx(10,66)
qc.cx(28,66)
qc.cx(8,68)
qc.cx(29,68)
qc.cx(9,69)
qc.cx(30,69)
qc.cx(10,70)
qc.cx(31,70)
qc.cx(8,72)
qc.cx(32,72)
qc.cx(9,73)
qc.cx(33,73)
qc.cx(10,74)
qc.cx(34,74)
A = AND(2,[1,1])
qc.append(A,[35,36,37])
A = AND(2,[1,1])
qc.append(A,[38,39,40])
A = AND(2,[1,1])
qc.append(A,[41,42,43])
A = AND(3,[1,1,1])
qc.append(A,[44,45,46,47])
A = AND(3,[1,1,1])
qc.append(A,[48,49,50,51])
A = AND(3,[1,1,1])
qc.append(A,[52,53,54,55])
A = AND(3,[1,1,1])
qc.append(A,[56,57,58,59])
A = AND(3,[1,1,1])
qc.append(A,[60,61,62,63])
A = AND(3,[1,1,1])
qc.append(A,[64,65,66,67])
A = AND(3,[1,1,1])
qc.append(A,[68,69,70,71])
A = AND(3,[1,1,1])
qc.append(A,[72,73,74,75])
# ***Router forwarding logic***

A = AND(2,[1,1])
qc.append(A,[37,67,76])
qc.cx(76,1)
A = AND(2,[1,1])
qc.append(A,[40,75,77])
qc.cx(77,0)
qc.cx(77,1)

qc.draw(output='mpl')
