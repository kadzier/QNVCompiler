# ***Defining Quantum registers***

router = QuantumRegister(3, 'r')
router_check = QuantumRegister(2, 'rc')
rc_ancillas = QuantumRegister(20, 'rca')
header = QuantumRegister(3, 'h')
header_check = QuantumRegister(2, 'hc')
hc_ancillas = QuantumRegister(20, 'hca')
routing_logic = QuantumRegister(5, 'fwd')
qc = QuantumCircuit(router, router_check, rc_ancillas, header, header_check, hc_ancillas, routing_logic)
qc.x(4)
qc.x(29)
qc.cx(0,5)
qc.cx(4,5)
qc.cx(1,6)
qc.cx(4,6)
qc.cx(2,7)
qc.cx(4,7)
A = AND(3,[1,1,1])
qc.append(A,[5,6,7,8])
qc.cx(0,9)
qc.cx(3,9)
qc.cx(1,10)
qc.cx(4,10)
qc.cx(2,11)
qc.cx(4,11)
A = AND(3,[1,1,1])
qc.append(A,[9,10,11,12])
qc.cx(0,13)
qc.cx(4,13)
qc.cx(1,14)
qc.cx(3,14)
qc.cx(2,15)
qc.cx(4,15)
A = AND(3,[1,1,1])
qc.append(A,[13,14,15,16])
qc.cx(0,17)
qc.cx(3,17)
qc.cx(1,18)
qc.cx(3,18)
qc.cx(2,19)
qc.cx(4,19)
A = AND(3,[1,1,1])
qc.append(A,[17,18,19,20])
qc.cx(0,21)
qc.cx(3,21)
qc.cx(1,22)
qc.cx(4,22)
qc.cx(2,23)
qc.cx(4,23)
A = AND(3,[1,1,1])
qc.append(A,[21,22,23,24])
qc.cx(25,30)
qc.cx(26,31)
qc.x(32)
qc.cx(28,33)
A = AND(3,[1,1,1])
qc.append(A,[30,31,32,33])
qc.cx(25,34)
qc.cx(26,35)
qc.cx(27,36)
qc.cx(28,37)
A = AND(3,[1,1,1])
qc.append(A,[34,35,36,37])
qc.x(38)
qc.x(39)
qc.cx(27,40)
qc.cx(28,41)
A = AND(3,[1,1,1])
qc.append(A,[38,39,40,41])
qc.cx(25,42)
qc.cx(26,43)
qc.x(44)
qc.cx(28,45)
A = AND(3,[1,1,1])
qc.append(A,[42,43,44,45])
qc.cx(25,46)
qc.cx(26,47)
qc.cx(27,48)
qc.cx(28,49)
A = AND(3,[1,1,1])
qc.append(A,[46,47,48,49])
A = AND(2,[1,1])
qc.append(A,[8,33,50])
qc.cx(50,2)
A = AND(2,[1,1])
qc.append(A,[12,37,51])
qc.cx(51,0)
qc.cx(51,1)
A = AND(2,[1,1])
qc.append(A,[16,41,52])
qc.cx(52,2)
A = AND(2,[1,1])
qc.append(A,[20,45,53])
qc.cx(53,2)
A = AND(2,[1,1])
qc.append(A,[24,49,54])
qc.cx(54,2)

qc.draw(output='mpl')
