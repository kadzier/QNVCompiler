# ***Defining Quantum registers***

router = QuantumRegister(3, 'r')
router_check = QuantumRegister(21, 'rc')
header = QuantumRegister(3, 'h')
header_check = QuantumRegister(24, 'hc')
rc_ancillas = QuantumRegister(28, 'rca')
hc_ancillas = QuantumRegister(32, 'hca')
fwd_ancillas = QuantumRegister(5, 'fwd')
qc = QuantumCircuit(router, router_check, header, header_check, rc_ancillas, hc_ancillas, fwd_ancillas)
# ***Router bit-checker circuit***

qc.x(3)
qc.x(4)
qc.x(5)
qc.x(6)
qc.x(7)
qc.x(9)
qc.x(11)
qc.x(12)
qc.x(16)
qc.x(17)
qc.x(19)
qc.x(23)
qc.x(27)
qc.x(28)
qc.x(29)
qc.x(30)
qc.x(31)
qc.x(33)
qc.x(35)
qc.x(36)
qc.x(40)
qc.x(41)
qc.x(43)
qc.x(47)
qc.cx(0,51)
qc.cx(3,51)
qc.cx(1,52)
qc.cx(4,52)
qc.cx(2,53)
qc.cx(5,53)
qc.cx(0,55)
qc.cx(6,55)
qc.cx(1,56)
qc.cx(7,56)
qc.cx(2,57)
qc.cx(8,57)
qc.cx(0,59)
qc.cx(9,59)
qc.cx(1,60)
qc.cx(10,60)
qc.cx(2,61)
qc.cx(11,61)
qc.cx(0,63)
qc.cx(12,63)
qc.cx(1,64)
qc.cx(13,64)
qc.cx(2,65)
qc.cx(14,65)
qc.cx(0,67)
qc.cx(15,67)
qc.cx(1,68)
qc.cx(16,68)
qc.cx(2,69)
qc.cx(17,69)
qc.cx(0,71)
qc.cx(18,71)
qc.cx(1,72)
qc.cx(19,72)
qc.cx(2,73)
qc.cx(20,73)
qc.cx(0,75)
qc.cx(21,75)
qc.cx(1,76)
qc.cx(22,76)
qc.cx(2,77)
qc.cx(23,77)
qc.cx(24,79)
qc.cx(27,79)
qc.cx(25,80)
qc.cx(28,80)
qc.cx(26,81)
qc.cx(29,81)
qc.cx(24,83)
qc.cx(30,83)
qc.cx(25,84)
qc.cx(31,84)
qc.cx(26,85)
qc.cx(32,85)
qc.cx(24,87)
qc.cx(33,87)
qc.cx(25,88)
qc.cx(34,88)
qc.cx(26,89)
qc.cx(35,89)
qc.cx(24,91)
qc.cx(36,91)
qc.cx(25,92)
qc.cx(37,92)
qc.cx(26,93)
qc.cx(38,93)
qc.cx(24,95)
qc.cx(39,95)
qc.cx(25,96)
qc.cx(40,96)
qc.cx(26,97)
qc.cx(41,97)
qc.cx(24,99)
qc.cx(42,99)
qc.cx(25,100)
qc.cx(43,100)
qc.cx(26,101)
qc.cx(44,101)
qc.cx(24,103)
qc.cx(45,103)
qc.cx(25,104)
qc.cx(46,104)
qc.cx(26,105)
qc.cx(47,105)
qc.cx(24,107)
qc.cx(48,107)
qc.cx(25,108)
qc.cx(49,108)
qc.cx(26,109)
qc.cx(50,109)
A = AND(3,[1,1,1])
qc.append(A,[51,52,53,54])
A = AND(3,[1,1,1])
qc.append(A,[55,56,57,58])
A = AND(3,[1,1,1])
qc.append(A,[59,60,61,62])
A = AND(3,[1,1,1])
qc.append(A,[63,64,65,66])
A = AND(3,[1,1,1])
qc.append(A,[67,68,69,70])
A = AND(3,[1,1,1])
qc.append(A,[71,72,73,74])
A = AND(3,[1,1,1])
qc.append(A,[75,76,77,78])
A = AND(3,[1,1,1])
qc.append(A,[79,80,81,82])
A = AND(3,[1,1,1])
qc.append(A,[83,84,85,86])
A = AND(3,[1,1,1])
qc.append(A,[87,88,89,90])
A = AND(3,[1,1,1])
qc.append(A,[91,92,93,94])
A = AND(3,[1,1,1])
qc.append(A,[95,96,97,98])
A = AND(3,[1,1,1])
qc.append(A,[99,100,101,102])
A = AND(3,[1,1,1])
qc.append(A,[103,104,105,106])
A = AND(3,[1,1,1])
qc.append(A,[107,108,109,110])
# ***Router forwarding logic***

A = AND(2,[1,1])
qc.append(A,[54,102,111])
qc.cx(111,2)
A = AND(2,[1,1])
qc.append(A,[58,110,112])
qc.cx(112,1)
qc.cx(112,2)
A = AND(2,[1,1])
qc.append(A,[62,102,113])
qc.cx(113,2)
A = AND(2,[1,1])
qc.append(A,[58,106,114])
qc.cx(114,0)
qc.cx(114,1)
qc.cx(114,2)
A = AND(2,[1,1])
qc.append(A,[70,82,115])
qc.cx(115,2)

qc.draw(output='mpl')
